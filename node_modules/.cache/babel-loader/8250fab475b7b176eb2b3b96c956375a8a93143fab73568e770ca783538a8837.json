{"ast":null,"code":"/**\n * Utility functions for calculating vehicle statistics\n */\n\n// Evaluates modification expressions to update vehicle stats\nconst evaluateModExpression = (mod, vehicle) => {\n  const stats = {\n    ...vehicle.stats\n  };\n  const level = mod.level || 1;\n\n  // Simple expression parser for basic modification effects\n  if (mod.expr) {\n    const expressions = mod.expr.split(';').map(expr => expr.trim());\n    expressions.forEach(expr => {\n      if (expr.includes('=')) {\n        const [statName, formula] = expr.split('=').map(part => part.trim());\n\n        // Replace variables in the formula\n        let evaluatedFormula = formula.replace(/Level/g, level).replace(/Handling/g, stats.handling).replace(/OffRoad/g, stats.offRoad).replace(/Body/g, stats.body).replace(/Sig/g, stats.sig);\n\n        // Evaluate the formula\n        try {\n          const result = eval(evaluatedFormula);\n\n          // Update the appropriate stat\n          switch (statName.toLowerCase()) {\n            case 'cost':\n              stats.cost += result;\n              break;\n            case 'cf':\n              stats.cfUsed += result;\n              break;\n            case 'handling':\n              stats.handling = result;\n              break;\n            case 'offroad':\n              stats.offRoad = result;\n              break;\n            case 'body':\n              stats.body = result;\n              break;\n            case 'armour':\n              stats.armour += result;\n              break;\n            case 'sig':\n              stats.sig = result;\n              break;\n            case 'load':\n              stats.loadUsed += result;\n              break;\n            default:\n              break;\n          }\n        } catch (error) {\n          console.error(`Error evaluating formula: ${evaluatedFormula}`, error);\n        }\n      }\n    });\n  }\n  return stats;\n};\n\n// Calculate all vehicle statistics based on chassis, engine, and modifications\nexport const calculateVehicleStats = vehicle => {\n  let stats = {\n    cost: 0,\n    handling: 0,\n    offRoad: 0,\n    body: 0,\n    armour: 0,\n    cf: 0,\n    cfMax: 0,\n    cfUsed: 0,\n    speed: 0,\n    speedMax: 0,\n    accel: 0,\n    accelMax: 0,\n    load: 0,\n    loadMax: 0,\n    loadUsed: 0,\n    sig: 0,\n    economy: 0,\n    economyMax: 0,\n    fuel: 0,\n    seating: '',\n    entry: '',\n    setupTime: 0,\n    tol: 'N'\n  };\n\n  // Apply chassis stats if available\n  if (vehicle.chassis) {\n    stats = {\n      ...stats,\n      cost: vehicle.chassis.cost || 0,\n      handling: vehicle.chassis.handling || 0,\n      offRoad: vehicle.chassis.offRoad || 0,\n      body: vehicle.chassis.body || 0,\n      armour: vehicle.chassis.armour || 0,\n      cf: vehicle.chassis.cf || 0,\n      cfMax: vehicle.chassis.cfMax || 0,\n      seating: vehicle.chassis.seating || '',\n      entry: vehicle.chassis.entry || '',\n      setupTime: vehicle.chassis.setupTime || 0,\n      tol: vehicle.chassis.tol || 'N'\n    };\n  }\n\n  // Apply engine stats if available\n  if (vehicle.engine) {\n    stats = {\n      ...stats,\n      cost: stats.cost + (vehicle.engine.cost || 0),\n      speed: vehicle.engine.speed || 0,\n      speedMax: vehicle.engine.speedMax || 0,\n      accel: vehicle.engine.accel || 0,\n      accelMax: vehicle.engine.accelMax || 0,\n      load: vehicle.engine.load || 0,\n      loadMax: vehicle.engine.loadMax || 0,\n      sig: vehicle.engine.sig || 0,\n      economy: vehicle.engine.economy || 0,\n      economyMax: vehicle.engine.economyMax || 0,\n      fuel: vehicle.engine.fuel || 0\n    };\n  }\n\n  // Apply modification effects\n  if (vehicle.modifications && vehicle.modifications.length > 0) {\n    vehicle.modifications.forEach(mod => {\n      const updatedStats = evaluateModExpression(mod, {\n        ...vehicle,\n        stats\n      });\n      stats = {\n        ...stats,\n        ...updatedStats\n      };\n    });\n  }\n  return stats;\n};","map":{"version":3,"names":["evaluateModExpression","mod","vehicle","stats","level","expr","expressions","split","map","trim","forEach","includes","statName","formula","part","evaluatedFormula","replace","handling","offRoad","body","sig","result","eval","toLowerCase","cost","cfUsed","armour","loadUsed","error","console","calculateVehicleStats","cf","cfMax","speed","speedMax","accel","accelMax","load","loadMax","economy","economyMax","fuel","seating","entry","setupTime","tol","chassis","engine","modifications","length","updatedStats"],"sources":["/Users/martyhenderson/github/theshop-react/src/utils/vehicleCalculator.js"],"sourcesContent":["/**\n * Utility functions for calculating vehicle statistics\n */\n\n// Evaluates modification expressions to update vehicle stats\nconst evaluateModExpression = (mod, vehicle) => {\n  const stats = { ...vehicle.stats };\n  const level = mod.level || 1;\n  \n  // Simple expression parser for basic modification effects\n  if (mod.expr) {\n    const expressions = mod.expr.split(';').map(expr => expr.trim());\n    \n    expressions.forEach(expr => {\n      if (expr.includes('=')) {\n        const [statName, formula] = expr.split('=').map(part => part.trim());\n        \n        // Replace variables in the formula\n        let evaluatedFormula = formula\n          .replace(/Level/g, level)\n          .replace(/Handling/g, stats.handling)\n          .replace(/OffRoad/g, stats.offRoad)\n          .replace(/Body/g, stats.body)\n          .replace(/Sig/g, stats.sig);\n        \n        // Evaluate the formula\n        try {\n          const result = eval(evaluatedFormula);\n          \n          // Update the appropriate stat\n          switch (statName.toLowerCase()) {\n            case 'cost':\n              stats.cost += result;\n              break;\n            case 'cf':\n              stats.cfUsed += result;\n              break;\n            case 'handling':\n              stats.handling = result;\n              break;\n            case 'offroad':\n              stats.offRoad = result;\n              break;\n            case 'body':\n              stats.body = result;\n              break;\n            case 'armour':\n              stats.armour += result;\n              break;\n            case 'sig':\n              stats.sig = result;\n              break;\n            case 'load':\n              stats.loadUsed += result;\n              break;\n            default:\n              break;\n          }\n        } catch (error) {\n          console.error(`Error evaluating formula: ${evaluatedFormula}`, error);\n        }\n      }\n    });\n  }\n  \n  return stats;\n};\n\n// Calculate all vehicle statistics based on chassis, engine, and modifications\nexport const calculateVehicleStats = (vehicle) => {\n  let stats = {\n    cost: 0,\n    handling: 0,\n    offRoad: 0,\n    body: 0,\n    armour: 0,\n    cf: 0,\n    cfMax: 0,\n    cfUsed: 0,\n    speed: 0,\n    speedMax: 0,\n    accel: 0,\n    accelMax: 0,\n    load: 0,\n    loadMax: 0,\n    loadUsed: 0,\n    sig: 0,\n    economy: 0,\n    economyMax: 0,\n    fuel: 0,\n    seating: '',\n    entry: '',\n    setupTime: 0,\n    tol: 'N'\n  };\n  \n  // Apply chassis stats if available\n  if (vehicle.chassis) {\n    stats = {\n      ...stats,\n      cost: vehicle.chassis.cost || 0,\n      handling: vehicle.chassis.handling || 0,\n      offRoad: vehicle.chassis.offRoad || 0,\n      body: vehicle.chassis.body || 0,\n      armour: vehicle.chassis.armour || 0,\n      cf: vehicle.chassis.cf || 0,\n      cfMax: vehicle.chassis.cfMax || 0,\n      seating: vehicle.chassis.seating || '',\n      entry: vehicle.chassis.entry || '',\n      setupTime: vehicle.chassis.setupTime || 0,\n      tol: vehicle.chassis.tol || 'N'\n    };\n  }\n  \n  // Apply engine stats if available\n  if (vehicle.engine) {\n    stats = {\n      ...stats,\n      cost: stats.cost + (vehicle.engine.cost || 0),\n      speed: vehicle.engine.speed || 0,\n      speedMax: vehicle.engine.speedMax || 0,\n      accel: vehicle.engine.accel || 0,\n      accelMax: vehicle.engine.accelMax || 0,\n      load: vehicle.engine.load || 0,\n      loadMax: vehicle.engine.loadMax || 0,\n      sig: vehicle.engine.sig || 0,\n      economy: vehicle.engine.economy || 0,\n      economyMax: vehicle.engine.economyMax || 0,\n      fuel: vehicle.engine.fuel || 0\n    };\n  }\n  \n  // Apply modification effects\n  if (vehicle.modifications && vehicle.modifications.length > 0) {\n    vehicle.modifications.forEach(mod => {\n      const updatedStats = evaluateModExpression(mod, { ...vehicle, stats });\n      stats = { ...stats, ...updatedStats };\n    });\n  }\n  \n  return stats;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}