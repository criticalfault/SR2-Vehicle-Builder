{"ast":null,"code":"/**\n * Utility functions for calculating vehicle statistics\n * \n * This follows the order of operations from Rigger2.dat:\n * :\n * ^\n * *,/\n * +,-, &, |\n * ?, <<, >>\n * <, <=, ==, >=, >, !=\n * &&, ||\n * =, +=, -=, *=, /=\n */\n\n// Simple expression evaluator for modification expressions\nconst evaluateExpression = (expr, context) => {\n  // Replace variables with their values from context\n  let evaluatedExpr = expr;\n\n  // Handle basic operations\n  Object.keys(context).forEach(key => {\n    const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n    evaluatedExpr = evaluatedExpr.replace(regex, context[key]);\n  });\n\n  // Handle special operators\n  // ? (conditional), << (min), >> (max)\n  evaluatedExpr = evaluatedExpr.replace(/(\\w+)\\s*\\?\\s*(\\w+)/g, '($1 ? $2 : 0)').replace(/(\\w+)\\s*<<\\s*(\\w+)/g, 'Math.min($1, $2)').replace(/(\\w+)\\s*>>\\s*(\\w+)/g, 'Math.max($1, $2)');\n  try {\n    return eval(evaluatedExpr);\n  } catch (error) {\n    console.error(`Error evaluating expression: ${evaluatedExpr}`, error);\n    return 0;\n  }\n};\n\n// Evaluates modification expressions to update vehicle stats\nconst evaluateModExpression = (mod, vehicle) => {\n  const stats = {\n    ...vehicle.stats\n  };\n  const level = mod.level || 1;\n\n  // Create context for expression evaluation\n  const context = {\n    Level: level,\n    Handling: stats.handling,\n    OffRoad: stats.offRoad,\n    Body: stats.body,\n    Armour: stats.armour,\n    CF: stats.cf,\n    CFMax: stats.cfMax,\n    CFUsed: stats.cfUsed || 0,\n    Speed: stats.speed,\n    SpeedMax: stats.speedMax,\n    Accel: stats.accel,\n    AccelMax: stats.accelMax,\n    Load: stats.load,\n    LoadMax: stats.loadMax,\n    LoadUsed: stats.loadUsed || 0,\n    Sig: stats.sig,\n    Economy: stats.economy,\n    EconomyMax: stats.economyMax,\n    Fuel: stats.fuel,\n    Cost: stats.cost\n  };\n\n  // Simple expression parser for basic modification effects\n  if (mod.expr) {\n    const expressions = mod.expr.split(';').map(expr => expr.trim());\n    expressions.forEach(expr => {\n      if (expr.includes('=')) {\n        const [statName, formula] = expr.split('=').map(part => part.trim());\n\n        // Handle different assignment operators (=, +=, -=, *=, /=)\n        let operator = '=';\n        let actualStatName = statName;\n        if (statName.endsWith('+=')) {\n          operator = '+=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('-=')) {\n          operator = '-=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('*=')) {\n          operator = '*=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('/=')) {\n          operator = '/=';\n          actualStatName = statName.slice(0, -2).trim();\n        }\n\n        // Evaluate the formula\n        const result = evaluateExpression(formula, context);\n\n        // Update the context for subsequent expressions\n        switch (operator) {\n          case '=':\n            context[actualStatName] = result;\n            break;\n          case '+=':\n            context[actualStatName] += result;\n            break;\n          case '-=':\n            context[actualStatName] -= result;\n            break;\n          case '*=':\n            context[actualStatName] *= result;\n            break;\n          case '/=':\n            context[actualStatName] /= result;\n            break;\n        }\n\n        // Update the appropriate stat in the stats object\n        switch (actualStatName.toLowerCase()) {\n          case 'cost':\n            stats.cost = context.Cost;\n            break;\n          case 'cf':\n            stats.cf = context.CF;\n            break;\n          case 'cfused':\n            stats.cfUsed = context.CFUsed;\n            break;\n          case 'handling':\n            stats.handling = context.Handling;\n            break;\n          case 'offroad':\n            stats.offRoad = context.OffRoad;\n            break;\n          case 'body':\n            stats.body = context.Body;\n            break;\n          case 'armour':\n            stats.armour = context.Armour;\n            break;\n          case 'sig':\n            stats.sig = context.Sig;\n            break;\n          case 'load':\n            stats.load = context.Load;\n            break;\n          case 'loadused':\n            stats.loadUsed = context.LoadUsed;\n            break;\n          case 'speed':\n            stats.speed = context.Speed;\n            break;\n          case 'speedmax':\n            stats.speedMax = context.SpeedMax;\n            break;\n          case 'accel':\n            stats.accel = context.Accel;\n            break;\n          case 'accelmax':\n            stats.accelMax = context.AccelMax;\n            break;\n          case 'economy':\n            stats.economy = context.Economy;\n            break;\n          case 'economymax':\n            stats.economyMax = context.EconomyMax;\n            break;\n          case 'fuel':\n            stats.fuel = context.Fuel;\n            break;\n          case 'tol':\n            stats.tol = result;\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n  return stats;\n};\n\n// Calculate all vehicle statistics based on chassis, engine, and modifications\nexport const calculateVehicleStats = vehicle => {\n  let stats = {\n    cost: 0,\n    handling: 0,\n    offRoad: 0,\n    body: 0,\n    armour: 0,\n    cf: 0,\n    cfMax: 0,\n    cfUsed: 0,\n    speed: 0,\n    speedMax: 0,\n    accel: 0,\n    accelMax: 0,\n    load: 0,\n    loadMax: 0,\n    loadUsed: 0,\n    sig: 0,\n    economy: 0,\n    economyMax: 0,\n    fuel: 0,\n    seating: '',\n    entry: '',\n    setupTime: 0,\n    tol: 'N'\n  };\n\n  // Apply chassis stats if available\n  if (vehicle.chassis) {\n    stats = {\n      ...stats,\n      cost: vehicle.chassis.cost || 0,\n      handling: vehicle.chassis.handling || 0,\n      offRoad: vehicle.chassis.offRoad || 0,\n      body: vehicle.chassis.body || 0,\n      armour: vehicle.chassis.armour || 0,\n      cf: vehicle.chassis.cf || 0,\n      cfMax: vehicle.chassis.cfMax || 0,\n      seating: vehicle.chassis.seating || '',\n      entry: vehicle.chassis.entry || '',\n      setupTime: vehicle.chassis.setupTime || 0,\n      tol: vehicle.chassis.tol || 'N'\n    };\n  }\n\n  // Apply engine stats if available\n  if (vehicle.engine) {\n    stats = {\n      ...stats,\n      cost: stats.cost + (vehicle.engine.cost || 0),\n      speed: vehicle.engine.speed || 0,\n      speedMax: vehicle.engine.speedMax || 0,\n      accel: vehicle.engine.accel || 0,\n      accelMax: vehicle.engine.accelMax || 0,\n      load: vehicle.engine.load || 0,\n      loadMax: vehicle.engine.loadMax || 0,\n      sig: vehicle.engine.sig || 0,\n      economy: vehicle.engine.economy || 0,\n      economyMax: vehicle.engine.economyMax || 0,\n      fuel: vehicle.engine.fuel || 0\n    };\n  }\n\n  // Apply modification effects in order of priority\n  if (vehicle.modifications && vehicle.modifications.length > 0) {\n    // Sort modifications by priority\n    const sortedMods = [...vehicle.modifications].sort((a, b) => a.priority - b.priority);\n    sortedMods.forEach(mod => {\n      const updatedStats = evaluateModExpression(mod, {\n        ...vehicle,\n        stats\n      });\n      stats = {\n        ...stats,\n        ...updatedStats\n      };\n    });\n  }\n  return stats;\n};","map":{"version":3,"names":["evaluateExpression","expr","context","evaluatedExpr","Object","keys","forEach","key","regex","RegExp","replace","eval","error","console","evaluateModExpression","mod","vehicle","stats","level","Level","Handling","handling","OffRoad","offRoad","Body","body","Armour","armour","CF","cf","CFMax","cfMax","CFUsed","cfUsed","Speed","speed","SpeedMax","speedMax","Accel","accel","AccelMax","accelMax","Load","load","LoadMax","loadMax","LoadUsed","loadUsed","Sig","sig","Economy","economy","EconomyMax","economyMax","Fuel","fuel","Cost","cost","expressions","split","map","trim","includes","statName","formula","part","operator","actualStatName","endsWith","slice","result","toLowerCase","tol","calculateVehicleStats","seating","entry","setupTime","chassis","engine","modifications","length","sortedMods","sort","a","b","priority","updatedStats"],"sources":["/Users/martyhenderson/github/theshop-react/src/utils/vehicleCalculator.js"],"sourcesContent":["/**\n * Utility functions for calculating vehicle statistics\n * \n * This follows the order of operations from Rigger2.dat:\n * :\n * ^\n * *,/\n * +,-, &, |\n * ?, <<, >>\n * <, <=, ==, >=, >, !=\n * &&, ||\n * =, +=, -=, *=, /=\n */\n\n// Simple expression evaluator for modification expressions\nconst evaluateExpression = (expr, context) => {\n  // Replace variables with their values from context\n  let evaluatedExpr = expr;\n  \n  // Handle basic operations\n  Object.keys(context).forEach(key => {\n    const regex = new RegExp(`\\\\b${key}\\\\b`, 'g');\n    evaluatedExpr = evaluatedExpr.replace(regex, context[key]);\n  });\n  \n  // Handle special operators\n  // ? (conditional), << (min), >> (max)\n  evaluatedExpr = evaluatedExpr\n    .replace(/(\\w+)\\s*\\?\\s*(\\w+)/g, '($1 ? $2 : 0)')\n    .replace(/(\\w+)\\s*<<\\s*(\\w+)/g, 'Math.min($1, $2)')\n    .replace(/(\\w+)\\s*>>\\s*(\\w+)/g, 'Math.max($1, $2)');\n  \n  try {\n    return eval(evaluatedExpr);\n  } catch (error) {\n    console.error(`Error evaluating expression: ${evaluatedExpr}`, error);\n    return 0;\n  }\n};\n\n// Evaluates modification expressions to update vehicle stats\nconst evaluateModExpression = (mod, vehicle) => {\n  const stats = { ...vehicle.stats };\n  const level = mod.level || 1;\n  \n  // Create context for expression evaluation\n  const context = {\n    Level: level,\n    Handling: stats.handling,\n    OffRoad: stats.offRoad,\n    Body: stats.body,\n    Armour: stats.armour,\n    CF: stats.cf,\n    CFMax: stats.cfMax,\n    CFUsed: stats.cfUsed || 0,\n    Speed: stats.speed,\n    SpeedMax: stats.speedMax,\n    Accel: stats.accel,\n    AccelMax: stats.accelMax,\n    Load: stats.load,\n    LoadMax: stats.loadMax,\n    LoadUsed: stats.loadUsed || 0,\n    Sig: stats.sig,\n    Economy: stats.economy,\n    EconomyMax: stats.economyMax,\n    Fuel: stats.fuel,\n    Cost: stats.cost\n  };\n  \n  // Simple expression parser for basic modification effects\n  if (mod.expr) {\n    const expressions = mod.expr.split(';').map(expr => expr.trim());\n    \n    expressions.forEach(expr => {\n      if (expr.includes('=')) {\n        const [statName, formula] = expr.split('=').map(part => part.trim());\n        \n        // Handle different assignment operators (=, +=, -=, *=, /=)\n        let operator = '=';\n        let actualStatName = statName;\n        \n        if (statName.endsWith('+=')) {\n          operator = '+=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('-=')) {\n          operator = '-=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('*=')) {\n          operator = '*=';\n          actualStatName = statName.slice(0, -2).trim();\n        } else if (statName.endsWith('/=')) {\n          operator = '/=';\n          actualStatName = statName.slice(0, -2).trim();\n        }\n        \n        // Evaluate the formula\n        const result = evaluateExpression(formula, context);\n        \n        // Update the context for subsequent expressions\n        switch (operator) {\n          case '=':\n            context[actualStatName] = result;\n            break;\n          case '+=':\n            context[actualStatName] += result;\n            break;\n          case '-=':\n            context[actualStatName] -= result;\n            break;\n          case '*=':\n            context[actualStatName] *= result;\n            break;\n          case '/=':\n            context[actualStatName] /= result;\n            break;\n        }\n        \n        // Update the appropriate stat in the stats object\n        switch (actualStatName.toLowerCase()) {\n          case 'cost':\n            stats.cost = context.Cost;\n            break;\n          case 'cf':\n            stats.cf = context.CF;\n            break;\n          case 'cfused':\n            stats.cfUsed = context.CFUsed;\n            break;\n          case 'handling':\n            stats.handling = context.Handling;\n            break;\n          case 'offroad':\n            stats.offRoad = context.OffRoad;\n            break;\n          case 'body':\n            stats.body = context.Body;\n            break;\n          case 'armour':\n            stats.armour = context.Armour;\n            break;\n          case 'sig':\n            stats.sig = context.Sig;\n            break;\n          case 'load':\n            stats.load = context.Load;\n            break;\n          case 'loadused':\n            stats.loadUsed = context.LoadUsed;\n            break;\n          case 'speed':\n            stats.speed = context.Speed;\n            break;\n          case 'speedmax':\n            stats.speedMax = context.SpeedMax;\n            break;\n          case 'accel':\n            stats.accel = context.Accel;\n            break;\n          case 'accelmax':\n            stats.accelMax = context.AccelMax;\n            break;\n          case 'economy':\n            stats.economy = context.Economy;\n            break;\n          case 'economymax':\n            stats.economyMax = context.EconomyMax;\n            break;\n          case 'fuel':\n            stats.fuel = context.Fuel;\n            break;\n          case 'tol':\n            stats.tol = result;\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n  \n  return stats;\n};\n\n// Calculate all vehicle statistics based on chassis, engine, and modifications\nexport const calculateVehicleStats = (vehicle) => {\n  let stats = {\n    cost: 0,\n    handling: 0,\n    offRoad: 0,\n    body: 0,\n    armour: 0,\n    cf: 0,\n    cfMax: 0,\n    cfUsed: 0,\n    speed: 0,\n    speedMax: 0,\n    accel: 0,\n    accelMax: 0,\n    load: 0,\n    loadMax: 0,\n    loadUsed: 0,\n    sig: 0,\n    economy: 0,\n    economyMax: 0,\n    fuel: 0,\n    seating: '',\n    entry: '',\n    setupTime: 0,\n    tol: 'N'\n  };\n  \n  // Apply chassis stats if available\n  if (vehicle.chassis) {\n    stats = {\n      ...stats,\n      cost: vehicle.chassis.cost || 0,\n      handling: vehicle.chassis.handling || 0,\n      offRoad: vehicle.chassis.offRoad || 0,\n      body: vehicle.chassis.body || 0,\n      armour: vehicle.chassis.armour || 0,\n      cf: vehicle.chassis.cf || 0,\n      cfMax: vehicle.chassis.cfMax || 0,\n      seating: vehicle.chassis.seating || '',\n      entry: vehicle.chassis.entry || '',\n      setupTime: vehicle.chassis.setupTime || 0,\n      tol: vehicle.chassis.tol || 'N'\n    };\n  }\n  \n  // Apply engine stats if available\n  if (vehicle.engine) {\n    stats = {\n      ...stats,\n      cost: stats.cost + (vehicle.engine.cost || 0),\n      speed: vehicle.engine.speed || 0,\n      speedMax: vehicle.engine.speedMax || 0,\n      accel: vehicle.engine.accel || 0,\n      accelMax: vehicle.engine.accelMax || 0,\n      load: vehicle.engine.load || 0,\n      loadMax: vehicle.engine.loadMax || 0,\n      sig: vehicle.engine.sig || 0,\n      economy: vehicle.engine.economy || 0,\n      economyMax: vehicle.engine.economyMax || 0,\n      fuel: vehicle.engine.fuel || 0\n    };\n  }\n  \n  // Apply modification effects in order of priority\n  if (vehicle.modifications && vehicle.modifications.length > 0) {\n    // Sort modifications by priority\n    const sortedMods = [...vehicle.modifications].sort((a, b) => a.priority - b.priority);\n    \n    sortedMods.forEach(mod => {\n      const updatedStats = evaluateModExpression(mod, { ...vehicle, stats });\n      stats = { ...stats, ...updatedStats };\n    });\n  }\n  \n  return stats;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}