{"ast":null,"code":"/**\n * Utility functions for loading data from JSON files\n */\n\n// Helper function to parse the Rigger2.dat format\nconst parseRigger2Data = async () => {\n  try {\n    // In a real implementation, we would fetch the actual Rigger2.dat file\n    // and parse it according to the format described in the file\n\n    // For this example, we'll use the pre-processed JSON files\n    const chassisResponse = await fetch('/data/chassis.json');\n    const engineResponse = await fetch('/data/engines.json');\n    const modificationResponse = await fetch('/data/modifications.json');\n    if (!chassisResponse.ok || !engineResponse.ok || !modificationResponse.ok) {\n      throw new Error('Failed to load data files');\n    }\n    const chassisData = await chassisResponse.json();\n    const engineData = await engineResponse.json();\n    const modificationData = await modificationResponse.json();\n    return {\n      chassis: chassisData.chassis,\n      engines: engineData.engines,\n      modifications: modificationData.modifications\n    };\n  } catch (error) {\n    console.error('Error parsing Rigger2.dat:', error);\n    return {\n      chassis: [],\n      engines: [],\n      modifications: []\n    };\n  }\n};\nexport const loadChassisData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.chassis || [];\n  } catch (error) {\n    console.error('Error loading chassis data:', error);\n    return [];\n  }\n};\nexport const loadEngineData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.engines || [];\n  } catch (error) {\n    console.error('Error loading engine data:', error);\n    return [];\n  }\n};\nexport const loadModificationData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.modifications || [];\n  } catch (error) {\n    console.error('Error loading modification data:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["parseRigger2Data","chassisResponse","fetch","engineResponse","modificationResponse","ok","Error","chassisData","json","engineData","modificationData","chassis","engines","modifications","error","console","loadChassisData","data","loadEngineData","loadModificationData"],"sources":["/Users/martyhenderson/github/theshop-react/src/utils/dataLoader.js"],"sourcesContent":["/**\n * Utility functions for loading data from JSON files\n */\n\n// Helper function to parse the Rigger2.dat format\nconst parseRigger2Data = async () => {\n  try {\n    // In a real implementation, we would fetch the actual Rigger2.dat file\n    // and parse it according to the format described in the file\n    \n    // For this example, we'll use the pre-processed JSON files\n    const chassisResponse = await fetch('/data/chassis.json');\n    const engineResponse = await fetch('/data/engines.json');\n    const modificationResponse = await fetch('/data/modifications.json');\n    \n    if (!chassisResponse.ok || !engineResponse.ok || !modificationResponse.ok) {\n      throw new Error('Failed to load data files');\n    }\n    \n    const chassisData = await chassisResponse.json();\n    const engineData = await engineResponse.json();\n    const modificationData = await modificationResponse.json();\n    \n    return {\n      chassis: chassisData.chassis,\n      engines: engineData.engines,\n      modifications: modificationData.modifications\n    };\n  } catch (error) {\n    console.error('Error parsing Rigger2.dat:', error);\n    return {\n      chassis: [],\n      engines: [],\n      modifications: []\n    };\n  }\n};\n\nexport const loadChassisData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.chassis || [];\n  } catch (error) {\n    console.error('Error loading chassis data:', error);\n    return [];\n  }\n};\n\nexport const loadEngineData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.engines || [];\n  } catch (error) {\n    console.error('Error loading engine data:', error);\n    return [];\n  }\n};\n\nexport const loadModificationData = async () => {\n  try {\n    const data = await parseRigger2Data();\n    return data.modifications || [];\n  } catch (error) {\n    console.error('Error loading modification data:', error);\n    return [];\n  }\n};"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,MAAMA,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EACnC,IAAI;IACF;IACA;;IAEA;IACA,MAAMC,eAAe,GAAG,MAAMC,KAAK,CAAC,oBAAoB,CAAC;IACzD,MAAMC,cAAc,GAAG,MAAMD,KAAK,CAAC,oBAAoB,CAAC;IACxD,MAAME,oBAAoB,GAAG,MAAMF,KAAK,CAAC,0BAA0B,CAAC;IAEpE,IAAI,CAACD,eAAe,CAACI,EAAE,IAAI,CAACF,cAAc,CAACE,EAAE,IAAI,CAACD,oBAAoB,CAACC,EAAE,EAAE;MACzE,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;IAC9C;IAEA,MAAMC,WAAW,GAAG,MAAMN,eAAe,CAACO,IAAI,CAAC,CAAC;IAChD,MAAMC,UAAU,GAAG,MAAMN,cAAc,CAACK,IAAI,CAAC,CAAC;IAC9C,MAAME,gBAAgB,GAAG,MAAMN,oBAAoB,CAACI,IAAI,CAAC,CAAC;IAE1D,OAAO;MACLG,OAAO,EAAEJ,WAAW,CAACI,OAAO;MAC5BC,OAAO,EAAEH,UAAU,CAACG,OAAO;MAC3BC,aAAa,EAAEH,gBAAgB,CAACG;IAClC,CAAC;EACH,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MACLH,OAAO,EAAE,EAAE;MACXC,OAAO,EAAE,EAAE;MACXC,aAAa,EAAE;IACjB,CAAC;EACH;AACF,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,MAAMC,IAAI,GAAG,MAAMjB,gBAAgB,CAAC,CAAC;IACrC,OAAOiB,IAAI,CAACN,OAAO,IAAI,EAAE;EAC3B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMI,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMD,IAAI,GAAG,MAAMjB,gBAAgB,CAAC,CAAC;IACrC,OAAOiB,IAAI,CAACL,OAAO,IAAI,EAAE;EAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,EAAE;EACX;AACF,CAAC;AAED,OAAO,MAAMK,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF,MAAMF,IAAI,GAAG,MAAMjB,gBAAgB,CAAC,CAAC;IACrC,OAAOiB,IAAI,CAACJ,aAAa,IAAI,EAAE;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}